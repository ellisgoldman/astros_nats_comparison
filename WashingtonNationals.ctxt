#BlueJ class context
comment0.params=
comment0.target=WashingtonNationals()
comment0.text=\n\ Constructor\ for\ objects\ of\ class\ WashingtonNationals\n
comment1.params=
comment1.target=double\ findMaxBattingAverage()
comment1.text=\n\ Calculates\ and\ returns\ the\ maximum\ batting\ average\ on\ the\ team.\n\ \n\ @return\ the\ max\ batting\ average\n
comment10.params=
comment10.target=void\ sortHits()
comment10.text=\n\ Sorts\ hits\ descending\ using\ non-recursive\ merge\ sort.\n
comment11.params=start\ end
comment11.target=void\ sortHitsHelper(int,\ int)
comment11.text=\n\ Sorts\ a\ descending\ portion\ of\ the\ array\ list\ based\ upon\ number\ of\ hits,\n\ using\ selection\ sort.\n\ \n\ @param\ start\ the\ first\ index\ to\ start\ the\ sort\n\ @param\ end\ \ \ one\ past\ the\ last\ index\ to\ sort\n
comment12.params=
comment12.target=void\ sortHomeRuns()
comment12.text=\n\ Sorts\ the\ number\ of\ home\ runs\ in\ a\ descending\ manner\ using\ selection\ sort.\n
comment13.params=name
comment13.target=java.util.ArrayList\ searchTeamRosterName(java.lang.String)
comment13.text=\n\ Binary\ search\ for\ a\ player\ name.\ \n\ \n\ @param\ name\ \ the\ name\ being\ searched\ for\n\ @return\ an\ arraylist\ of\ names\ that\ occured\ on\ the\ roster\n\ \ \ \ \ \ \ \ \ returns\ null\ if\ there\ are\ no\ matches\n
comment14.params=name\ low\ high
comment14.target=java.util.ArrayList\ searchTeamRosterNameHelper(java.lang.String,\ int,\ int)
comment14.text=\n\ Recursive\ binary\ search\ for\ a\ player's\ name.\ This\ is\ a\ helper\ for\ \n\ searchTeamRosterName\n\ \n\ @precondition\ \ \ \ the\ arraylist\ must\ be\ presorted\ by\ the\ player's\ names\n\ \n\ @param\ name\ \ the\ player\ name\ to\ search\ for\n\ @param\ low\ \ \ the\ smallest\ index\ that\ needs\ to\ be\ checked\n\ @param\ high\ \ the\ highest\ index\ that\ needs\ to\ be\ checked\n\ \n\ @return\ a\ Player\ arraylist\ of\ all\ Player\ objects\ with\ a\ specified\ name.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ returns\ null\ if\ there\ are\ no\ matches\n
comment15.params=name\ index
comment15.target=java.util.ArrayList\ retrieveMatchedNames(java.lang.String,\ int)
comment15.text=\n\ Supports\ Binary\ Search\ method\ to\ get\ the\ full\ range\ of\ matches.\n\ \n\ @precondition\ the\ arraylist\ must\ be\ presorted\ by\ the\ player's\ names\n\ \n\ @param\ name\ \ the\ name\ of\ the\ player\ being\ searched\ for\n\ @param\ index\ the\ index\ where\ a\ match\ was\ found\n\ \n\ @return\ A\ Player\ arraylist\ with\ objects\ from\ players\ with\ a\ specified\ name.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ returns\ null\ if\ there\ are\ no\ matches\n
comment16.params=
comment16.target=void\ printHeader()
comment16.text=\n\ Prints\ and\ formats\ the\ headers\ for\ name,\ position,\ games\ played,\ runs,\ hits,\n\ doubles,\ triples,\ home\ runs,\ RBI's,\ strike\ outs,\ batting\ average,\ and\ slugging\ percentage.\n
comment17.params=
comment17.target=void\ printRoster()
comment17.text=\n\ Prints\ a\ formatted\ list\ of\ all\ the\ info\ regarding\ the\ team\ roster.\n
comment18.params=plays
comment18.target=void\ printRoster(java.util.ArrayList)
comment18.text=\n\ Prints\ all\ of\ the\ team\ roster.\n\ \n\ @param\ plays\ the\ arraylist\ of\ player\ data\n
comment19.params=
comment19.target=void\ printMenu()
comment19.text=\n\ Prints\ a\ menu\ for\ the\ user\ who\ can\ then\ use\ the\ various\ options.\n
comment2.params=
comment2.target=java.lang.String\ findMaxBattingAveragePlayer()
comment2.text=\n\ Returns\ the\ name\ of\ the\ player\ with\ the\ highest\ batting\ average.\n\ \n\ @return\ the\ player\ with\ the\ max\ AVG\n
comment20.params=
comment20.target=void\ printBattingAverageMax()
comment20.text=\n\ Prints\ the\ max\ batting\ average\ with\ the\ player's\ name.\n
comment21.params=
comment21.target=void\ printSluggingPercentageMax()
comment21.text=\n\ Prints\ the\ max\ slugging\ percentage\ with\ the\ player's\ name.\n
comment22.params=
comment22.target=void\ printTeamAverage()
comment22.text=\n\ Prints\ the\ team\ batting\ average.\n
comment23.params=
comment23.target=void\ printTeamSluggingPercentage()
comment23.text=\n\ Prints\ the\ team\ slugging\ percentage.\n
comment24.params=
comment24.target=boolean\ interactWithUser()
comment24.text=\n\ Interacts\ with\ the\ user\ based\ on\ their\ input\ values.\n\ \n\ @return\ the\ completed\ printed\ output\n
comment25.params=args
comment25.target=void\ main(java.lang.String[])
comment25.text=\n\ Runs\ the\ main\ method\ which\ interacts\ with\ the\ user\ based\ on\ the\ information\n\ they\ desire\ to\ attain.\n\ \n\ @param\ args\ \ user's\ information\ from\ the\ command\ line\n\ \n\ @throws\ IOException\ \ if\ file\ with\ the\ player\ information\ cannot\ be\ found\n
comment3.params=
comment3.target=double\ findMaxSluggingPercentage()
comment3.text=\n\ Calculates\ and\ returns\ the\ maximum\ slugging\ percentage\ on\ the\ team.\n\ \n\ @return\ the\ max\ slugging\ percentage\n
comment4.params=
comment4.target=java.lang.String\ findMaxSluggingPercentagePlayer()
comment4.text=\n\ Returns\ the\ name\ of\ the\ player\ with\ the\ highest\ slugging\ percentage.\n\ \n\ @return\ the\ player\ with\ the\ highest\ SLG\n
comment5.params=
comment5.target=double\ calculateTeamBattingAverage()
comment5.text=\n\ Calculates\ and\ returns\ the\ average\ batting\ average\ for\ the\ team.\n\ \n\ @return\ the\ average\ batting\ average\n
comment6.params=
comment6.target=double\ calculateTeamSluggingPercentage()
comment6.text=\n\ Calculates\ and\ returns\ the\ the\ average\ slugging\ percentage\ for\ the\ team.\n\ \n\ @return\ the\ average\ slugging\ percentage\ \n
comment7.params=
comment7.target=void\ sortPlayerNames()
comment7.text=\n\ Sorts\ the\ last\ names\ of\ the\ players\ in\ alphabetical\ order\n\ using\ insertion\ sort.\n
comment8.params=
comment8.target=void\ sortBattingAverages()
comment8.text=\n\ Sorts\ the\ team\ batting\ averages\ from\ highest\ to\ lowest\n\ using\ selection\ sort.\n\ \n
comment9.params=
comment9.target=void\ sortSluggingPercentages()
comment9.text=\n\ Sorts\ the\ team\ slugging\ percentages\ from\ highest\ to\ lowest\n\ using\ insertion\ sort.\n
numComments=26
